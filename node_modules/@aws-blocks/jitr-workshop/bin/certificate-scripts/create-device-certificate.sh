#!/bin/bash

# Stopping the script when a command's exit code signals a failure.
set -e 
set -o pipefail

ROOT_CA_DIRECTORY='./root-ca-certs'
CACERT_NAME='ca-certificate'
CERTIFICATE_NAME='device-certificate'
CERTIFICATE_AND_CACERT_NAME='device-and-ca-certificate.crt'
ROOT_CERT_URL='https://www.amazontrust.com/repository/AmazonRootCA1.pem'
ROOT_CERT_NAME='aws-root-cert.pem'
OPENSSL_CONFIG='./config/openssl-device.conf'
OUTPUT_DIRECTORY='./device-certs'

# The help usage text.
USAGE="$(basename "$0") [-h] [-d] [-r] [-o] -- Generates device certificates compatible with the AWS IoT Just-In-Time-Registration process given Root CA certificates.

Options :
    -h  displays this help text
    -o  (Optional) - the path to the OpenSSL config file to use
    -d  (Optional) - the path of the directory containing the Root CA certificates
    -r  (Optional) - the location in which the AWS IoT Root CA will be downloaded"

# Retrieving arguments from the command-line.
while getopts ":d:r:o:hs:" o; do
  case "${o}" in
    r) ROOT_CERT_NAME=${OPTARG} ;;
    o) OPENSSL_CONFIG=${OPTARG} ;;
    d) ROOT_CA_DIRECTORY=${OPTARG} ;;
    h) echo "$USAGE"
       exit 0 ;;
   \?) echo "Invalid option: -$OPTARG" >&2
       exit 1 ;;
    :) echo "Option -$OPTARG requires an argument." >&2
       exit 1 ;;
  esac
done

# Verifying that the Root CA directory exists.
if [ ! -d $ROOT_CA_DIRECTORY ]; then
  echo "[!] The Root CA directory ($ROOT_CA_DIRECTORY) does not exist. Did you execute the 'create-and-register-ca.sh' script first to generate a Root CA ?"
  exit 1
fi

# Verifying that the Root CA directory contains certificates.
if [ ! -f $ROOT_CA_DIRECTORY/$CACERT_NAME.pem ] || [ ! -f $ROOT_CA_DIRECTORY/$CACERT_NAME.key ]; then
  echo "[!] The Root CA directory ($ROOT_CA_DIRECTORY) does not contain valid Root CA certificates (expected '$ROOT_CA_DIRECTORY/$CACERT_NAME.pem' and '$ROOT_CA_DIRECTORY/$CACERT_NAME.key' to exist)."
  exit 1
fi

# Creating the output directory.
mkdir -p $OUTPUT_DIRECTORY

# Creating a new device private certificate.
openssl genrsa -out $OUTPUT_DIRECTORY/$CERTIFICATE_NAME.key 2048

# Creating a CSR.
openssl req \
  -config $OPENSSL_CONFIG \
  -new \
  -key $OUTPUT_DIRECTORY/$CERTIFICATE_NAME.key \
  -out $OUTPUT_DIRECTORY/$CERTIFICATE_NAME.csr
  
# Creating the device certificate using the given Certificate Authority.
openssl x509 \
  -req \
  -in $OUTPUT_DIRECTORY/$CERTIFICATE_NAME.csr \
  -CA $ROOT_CA_DIRECTORY/$CACERT_NAME.pem \
  -CAkey $ROOT_CA_DIRECTORY/$CACERT_NAME.key \
  -CAcreateserial \
  -CAserial $OUTPUT_DIRECTORY/$CERTIFICATE_NAME.srl \
  -out $OUTPUT_DIRECTORY/$CERTIFICATE_NAME.crt \
  -days 365 \
  -sha256
echo "[+] Created a new device certificate ($OUTPUT_DIRECTORY/$CERTIFICATE_NAME.key)"

# Creating a file containing the newly created device certificate, along
# with the Certificate Authority. 
cat $OUTPUT_DIRECTORY/$CERTIFICATE_NAME.crt $ROOT_CA_DIRECTORY/$CACERT_NAME.pem > $OUTPUT_DIRECTORY/$CERTIFICATE_AND_CACERT_NAME
echo "[+] The file containing the new device certificate and the content of the CA is '$OUTPUT_DIRECTORY/$CERTIFICATE_AND_CACERT_NAME'. This is the certificate to be used to initiate a connection to AWS IoT."

# If it doesn't already exist, we download the AWS root certificate required
# to create a connection to AWS IoT, and for the local TLS agent to acknowledge
# that the remote platform is indeed AWS IoT, and not a man in the middle.
if [ ! -f $ROOT_CERT_NAME ]; then
  echo "[+] AWS Root Certificate not detected, downloading it from Amazon Trust website ..."
  curl $ROOT_CERT_URL | tee $ROOT_CERT_NAME
  echo "[+] The AWS Root certificate has been successfully saved in the local directory ($ROOT_CERT_NAME)"
fi
