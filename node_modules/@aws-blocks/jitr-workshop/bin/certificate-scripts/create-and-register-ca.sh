#!/bin/bash

# Stopping the script when a command's exit code signals a failure.
set -e 
set -o pipefail

# Variables.
CACERT_NAME='ca-certificate'
PRIVATE_KEY_NAME='private-key-registration'
OPENSSL_CONFIG='./config/openssl-ca.conf'
OUTPUT_DIRECTORY='./root-ca-certs'

# The help usage text.
USAGE="$(basename "$0") [-h] [-d] [-o] -- Generates a new custom Root CA compatible with the AWS IoT Just-In-Time-Registration.

Options :
    -h  displays this help text
    -o  (Optional) - the path to the OpenSSL config file to use to generate a new Root CA
    -d  (Optional) - the path of the directory in which the generated Root CA certificates will be stored"

# Retrieving arguments from the command-line.
while getopts ":o:d:hs" o; do
  case "${o}" in
    o) OPENSSL_CONFIG=${OPTARG} ;;
    d) OUTPUT_DIRECTORY=${OPTARG} ;;
    h) echo "$USAGE"
       exit 0 ;;
   \?) echo "Invalid option: -$OPTARG" >&2
       exit 1 ;;
    :) echo "Option -$OPTARG requires an argument." >&2
       exit 1 ;;
  esac
done

# Creating the output directory.
mkdir -p $OUTPUT_DIRECTORY

# Creates a new X.509 CA certificate.
openssl genrsa -out $OUTPUT_DIRECTORY/$CACERT_NAME.key 2048
openssl req \
  -config $OPENSSL_CONFIG \
  -x509 \
  -new \
  -nodes \
  -key $OUTPUT_DIRECTORY/$CACERT_NAME.key \
  -sha256 \
  -days 365 \
  -out $OUTPUT_DIRECTORY/$CACERT_NAME.pem
echo "[+] Created new X.509 CA certificate ($CACERT_NAME.pem)"

# Retrieves an AWS IoT registration code using the CLI.
REGISTRATION_CODE="$(aws iot get-registration-code | jq '.registrationCode' --raw-output)"
echo "[+] Got registration code from AWS IoT - $REGISTRATION_CODE"

# Creating a CSR using the registration code.
openssl genrsa -out $OUTPUT_DIRECTORY/$PRIVATE_KEY_NAME.key 2048
openssl req \
  -new \
  -key $OUTPUT_DIRECTORY/$PRIVATE_KEY_NAME.key \
  -subj "/CN=$REGISTRATION_CODE" \
  -out $OUTPUT_DIRECTORY/$PRIVATE_KEY_NAME.csr
echo "[+] Created a CSR using the registration code ($PRIVATE_KEY_NAME.csr)"

# Creating a new X.509 certificate using the CSR and the CA certificate.
openssl x509 \
  -req \
  -in $OUTPUT_DIRECTORY/$PRIVATE_KEY_NAME.csr \
  -CA $OUTPUT_DIRECTORY/$CACERT_NAME.pem \
  -CAkey $OUTPUT_DIRECTORY/$CACERT_NAME.key \
  -CAcreateserial \
  -CAserial $OUTPUT_DIRECTORY/$CACERT_NAME.srl \
  -out $OUTPUT_DIRECTORY/$PRIVATE_KEY_NAME.crt \
  -days 365 \
  -sha256
echo "[+] Created a new X.509 certificate using the CSR and the CA certificate ($PRIVATE_KEY_NAME.crt)"

# Certificate Authority registration in AWS IoT.
# We prompt the user to accept the registration.
read -p "We are going to register your CA in AWS IoT, would you like to continue (y/n)? "
if [[ ! $REPLY =~ ^[Yy]$ ]]; then
  echo "[!] Aborting the operation"
  exit
fi
echo "[+] Registering the CA certificate on AWS IoT ..."
CERTIFICATE_ID="$(aws iot register-ca-certificate --ca-certificate file://$OUTPUT_DIRECTORY/$CACERT_NAME.pem --verification-certificate file://$OUTPUT_DIRECTORY/$PRIVATE_KEY_NAME.crt | jq '.certificateId' --raw-output)"
echo "[+] Successfully registered the CA certificate, retrieving information about the certificate registration ..."
aws iot describe-ca-certificate --certificate-id $CERTIFICATE_ID

# Activating the Certificate Authority on AWS IoT.
echo "[+] Activating the Certificate Authority on AWS IoT ..."
aws iot update-ca-certificate --certificate-id $CERTIFICATE_ID --new-status ACTIVE
echo "[+] Successfully activate the Certificate Authority"

# Enabling the auto-registration-status of the CA on AWS IoT.
echo "[+] Enabling the auto-registration-status of the CA on AWS IoT ..."
aws iot update-ca-certificate --certificate-id $CERTIFICATE_ID --new-auto-registration-status ENABLE
echo "[+] Successfully enabled the auto-registration-status of the Certificate Authority"
echo "[+] You can see your newly registered CA in your console at: https://console.aws.amazon.com/iotv2/home#/cacertificatehub"
