AWSTemplateFormatVersion: "2010-09-09"
Description: Creates the appropriate resources in the your AWS account in order to
             implement Just-In-Time-Registration for your IoT devices and AWS Greengrass Groups.

# Metadata associated with this stack.
Metadata:

  # CFN lint rule configuration.
  cfn-lint:
    config:
      ignore_checks:
        - W3002
        - E1029

  # Cloudformation interface for parameters.
  AWS::CloudFormation::Interface:
    ParameterGroups:

      # General parameters label.
      - Label:
          default: General Parameters
        Parameters:
          - ThingName
          - ThingTypeName
          - InterceptorLambda

      # IoT devices parameters label.
      - Label:
          default: IoT Devices Parameters
        Parameters:
          - DevicePolicyName
          - DeviceReceivePolicy
          - DeviceSubscribePolicy
          - DevicePublishPolicy

      # Greengrass devices parameters label.
      - Label:
          default: Greengrass Devices Parameters
        Parameters:
          - GreengrassPolicyName
          - GreengrassGroupName
          - GreengrassReceivePolicy
          - GreengrassSubscribePolicy
          - GreengrassPublishPolicy
          - GreengrassUserServiceAccountRole

      # Certificate Event Queue parameters label.
      - Label:
          default: Certificate Event Queue Parameters
        Parameters:
          - CertificateEventQueueVisibilityTimeout
          - CertificateEventQueueMaxReceiveCount
          - CertificateEventDLQRetentionPeriod

      # Logging parameters label.
      - Label:
          default: Logging parameters
        Parameters:
          - LogEventsToDynamo
          - LogEventsToSqs
          - LogEventsToCloudWatch

    # Labels for the above parameters.
    ParameterLabels:
      ThingName:
        default: Thing name
      ThingTypeName:
        default: Thing type name
      InterceptorLambda:
        default: Interceptor Lambda
      DevicePolicyName:
        default: Device policy name
      DeviceReceivePolicy:
        default: Device receive policy
      DeviceSubscribePolicy:
        default: Device subscribe policy
      DevicePublishPolicy:
        default: Device publish policy
      GreengrassPolicyName:
        default: Greengrass policy name
      GreengrassGroupName:
        default: Greengrass group name
      GreengrassReceivePolicy:
        default: Greengrass receive policy
      GreengrassSubscribePolicy:
        default: Greengrass subscribe policy
      GreengrassPublishPolicy:
        default: Greengrass publish policy
      GreengrassUserServiceAccountRole:
        default: Greengrass service account role
      CertificateEventQueueVisibilityTimeout:
        default: Certificate event queue visibility timeout
      CertificateEventQueueMaxReceiveCount:
        default: Certificate event queue maximum receive count
      CertificateEventDLQRetentionPeriod:
        default: Retention period for the Certificate Event DLQ
      LogEventsToDynamo:
        default: Log registration events to DynamoDB ?
      LogEventsToSqs:
        default: Log registration events to SQS ?
      LogEventsToCloudWatch:
        default: Log registration events to CloudWatch ?

# Parameters exposed by this template.
Parameters:

  # General parameters.
  ThingName:
    Type: String
    Description: >
      Defines the name of the thing which is going to be associated with the device.
      If the thing does not exist, a new thing will be created.
      This field is compatible with template parameterization in order to customize the name of the policy,
      please read the documentation associated with the template for more information.
    Default: "thing-<%= certificate.attributes.subject.serialNumber %>"
    MinLength: 1
  ThingTypeName:
    Type: String
    Description: >
      The name of the thing type you want to associate your things with.
      If a thing type associated with your parameterized template does not exist, it will be automatically created.
      This field is compatible with template parameterization in order to customize the name of the thing type,
      please read the documentation associated with the template for more information.
      Thing types are required since they allow things to have more than 3 attributes.
    Default: "<%= certificate.attributes.subject['2.5.4.44'] %>-device"
    MinLength: 1
  InterceptorLambda:
    Type: String
    Description: >
      (Optional) - The name of an interceptor lambda function which can be plugged into the JITR template to enable clients to
      add custom logic to accept or refuse a device registration (e.g implementing a Certificate Revocation List system).
    Default: ""

  # IoT devices parameters.
  DevicePolicyName:
    Type: String
    Description: >
      Defines the name of the IoT policy which is going to be associated with the created IoT device(s).
      If the policy already exists, the device will be attached to it, otherwise a new policy will be automatically created. This field is compatible with template parameterization in order to customize the name of the policy,
      please read the documentation associated with the template for more information.
    Default: "iot-access-policy"
    MinLength: 1
  DeviceReceivePolicy:
    Type: String
    Description: >
      A list of comma-separated `iot:Receive` resources that you would like to grant access to IoT devices.
      You can use AWS IoT variables in the resources that you define (e.g certificate attributes, or thing attributes).
    Default: "device/${iot:Connection.Thing.ThingName},device/${iot:Connection.Thing.ThingName}/*"
  DeviceSubscribePolicy:
    Type: String
    Description: >
      A list of comma-separated `iot:Subscribe` resources that you would like to grant access to IoT devices.
      You can use AWS IoT variables in the resources that you define (e.g certificate attributes, or thing attributes).
    Default: "device/${iot:Connection.Thing.ThingName},device/${iot:Connection.Thing.ThingName}/*"
  DevicePublishPolicy:
    Type: String
    Description: >
      A list of comma-separated `iot:Publish` resources that you would like to grant access to IoT devices.
      You can use AWS IoT variables in the resources that you define (e.g certificate attributes, or thing attributes).
    Default: "device/${iot:Connection.Thing.ThingName},device/${iot:Connection.Thing.ThingName}/*"
  
  # Greengrass devices parameters.
  GreengrassPolicyName:
    Type: String
    Description: >
      Defines the name of the IoT policy which is going to be associated with the created Greengrass device(s).
      If the policy already exists, the device will be attached to it, otherwise a new policy will be automatically created. This field is compatible with template parameterization in order to customize the name of the policy, please read the documentation associated with the template for more information.
    Default: "greengrass-access-policy"
    MinLength: 1
  GreengrassGroupName:
    Type: String
    Description: >
      The name of the Greengrass Group provisioned for Greengrass enabled devices.
      This field is compatible with template parameterization in order to customize the name of the group,
      please read the documentation associated with the template for more information.
    Default: "<%= certificate.attributes.subject.serialNumber %>-group"
    MinLength: 1
  GreengrassReceivePolicy:
    Type: String
    Description: >
      A list of comma-separated `iot:Receive` resources that you would like to grant access to Greengrass devices.
      You can use AWS IoT variables in the resources that you define (e.g certificate attributes, or thing attributes).
    Default: "greengrass/${iot:Certificate.Subject.CommonName},greengrass/${iot:Certificate.Subject.CommonName}/*"
  GreengrassSubscribePolicy:
    Type: String
    Description: >
      A list of comma-separated `iot:Subscribe` resources that you would like to grant access to Greengrass devices.
      You can use AWS IoT variables in the resources that you define (e.g certificate attributes, or thing attributes).
    Default: "greengrass/${iot:Certificate.Subject.CommonName},greengrass/${iot:Certificate.Subject.CommonName}/*"
  GreengrassPublishPolicy:
    Type: String
    Description: >
      A list of comma-separated `iot:Publish` resources that you would like to grant access to Greengrass devices.
      You can use AWS IoT variables in the resources that you define (e.g certificate attributes, or thing attributes).
    Default: "greengrass/${iot:Certificate.Subject.CommonName},greengrass/${iot:Certificate.Subject.CommonName}/*"
  GreengrassUserServiceAccountRole:
    Type: String
    Description: >
      (Optional) - The ARN of a Greengrass service account role to associate with the current AWS account.
      If this parameter is not specified, a default Greengrass Service Role will be automatically created by this stack.
    Default: ""

  # Queue parameters.
  CertificateEventQueueVisibilityTimeout:
    Type: Number
    Description: >
      The visibility timeout of the certificate event processing queue.
    Default: 120
  CertificateEventQueueMaxReceiveCount:
    Type: Number
    Description: >
      The number of times a message is delivered to the certificate event processing queue before
      being moved to its associated dead-letter queue (defaults to 10 times).
    Default: 10
  CertificateEventDLQRetentionPeriod:
    Type: Number
    Description: >
      The retention period associated with the certificate event processing dead letter queue (defaults to 14 days).
    Default: 1209600

  # Logging parameters.
  LogEventsToDynamo:
    Type: String
    Description: >
      (Optional) - Whether to deploy a DynamoDB table which will keep records of the registration events having occured on the platform.
    Default: false
    AllowedValues:
      - true
      - false
  LogEventsToSqs:
    Type: String
    Description: >
      (Optional) - Whether to deploy an SQS Queue to which you would like to enqueue registration events for later asynchronous processing.
    Default: false
    AllowedValues:
      - true
      - false
  LogEventsToCloudWatch:
    Type: String
    Description: >
      (Optional) - Whether to log registration events to AWS CloudWatch using custom metrics for monitoring purposes.
    Default: false
    AllowedValues:
      - true
      - false

# Conditions declared in this template.
Conditions:
  LogToDynamoDb: !Equals [!Ref LogEventsToDynamo, true]
  LogToSqs: !Equals [!Ref LogEventsToSqs, true]
  LogToCloudWatch: !Equals [!Ref LogEventsToCloudWatch, true]
  InterceptorDefined: !Not [!Equals [!Ref InterceptorLambda, ""]]
  HasNotUserServiceAccountRole: !Equals [!Ref GreengrassUserServiceAccountRole, ""]

# Description of the resources to be created.
Resources:

  ######################################################
  ###                                                ###
  ###         General Registration Resources         ###
  ###                                                ###
  ###   Declaration of the CloudFormation resources  ###
  ###   allowing the registration of AWS IoT device  ###
  ###             resources on AWS IoT.              ###
  ###                                                ###
  ######################################################

  # The role allowing AWS IoT to push certificate
  # creation events into the SQS Queue.
  IotQueuingRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - iot.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: !Sub iot-queuing-policy-${AWS::StackName}
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - sqs:SendMessage
                Resource: !GetAtt CertificateEventQueue.Arn

  # The role associated with the Lambda in charge of
  # the device registration. This role also defines
  # an inline policy allowing the Lambda to execute
  # actions on the account.
  RegistrationRole:
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: F3
            reason: Used IoT actions does not allow to specify a specific resource.
          - id: W11
            reason: Used IoT actions does not allow to specify a specific resource.
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/AWSXrayWriteOnlyAccess
      Path: /
      Policies:
        - PolicyName: !Sub registration-policy-${AWS::StackName}
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - iot:UpdateCertificate
                  - iot:CreatePolicy
                  - iot:AttachPrincipalPolicy
                  - iot:AttachThingPrincipal
                  - iot:CreateThing
                  - iot:CreateThingType
                  - iot:DescribeCertificate
                  - iot:DescribeCaCertificate
                  - iot:DescribeThing
                  - iot:DescribeThingType
                  - iot:GetPolicy
                  - greengrass:*
                Resource: "*"
              - Effect: Allow
                Action:
                  - sqs:ReceiveMessage
                  - sqs:DeleteMessage
                  - sqs:GetQueueAttributes
                  - sqs:ChangeMessageVisibility
                Resource: !GetAtt CertificateEventQueue.Arn
              - Effect: Allow
                Action: sqs:SendMessage
                Resource: !GetAtt CertificateEventQueue.Arn
              - Effect: Allow
                Action:
                  - iam:CreateRole
                  - iam:AttachRolePolicy
                  - iam:PassRole
                Resource: "*"
              - !If
                - LogToDynamoDb
                - Effect: Allow
                  Action: dynamodb:PutItem
                  Resource: !GetAtt ProvisioningTable.Arn
                - !Ref AWS::NoValue
              - !If
                - LogToSqs
                - Effect: Allow
                  Action: sqs:SendMessage
                  Resource: !GetAtt ProvisioningQueue.Arn
                - !Ref AWS::NoValue
              - !If
                - LogToCloudWatch
                - Effect: Allow
                  Action: cloudwatch:PutMetricData
                  Resource: "*"
                  Condition:
                    StringEquals:
                      cloudwatch:namespace: "AWS/IoT"
                - !Ref AWS::NoValue
              - !If
                - InterceptorDefined
                - Effect: Allow
                  Action: lambda:InvokeFunction
                  Resource: !Sub "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${InterceptorLambda}"
                - !Ref AWS::NoValue

  # An SQS queue to which the certificate registration
  # events will be sent asynchronous processing.
  CertificateEventQueue:
    Type: AWS::SQS::Queue
    Properties:
      VisibilityTimeout: !Ref CertificateEventQueueVisibilityTimeout
      DelaySeconds: 5
      RedrivePolicy:
        deadLetterTargetArn: !GetAtt CertificateEventDLQ.Arn
        maxReceiveCount: !Ref CertificateEventQueueMaxReceiveCount

  # A Dead-Letter queue associated with the `CertificateEventQueue`.
  CertificateEventDLQ:
    Type: AWS::SQS::Queue
    Properties:
      MessageRetentionPeriod: !Ref CertificateEventDLQRetentionPeriod

  # Registration Lambda function which takes care
  # of registering the devices in AWS IoT.
  RegistrationLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: jitr-registration-lambda
      Description: >
        Registers and activates the newly connected devices in AWS IoT, and assigns them a standard policy.
      Handler: index.handler
      Role: !GetAtt RegistrationRole.Arn
      Code: ./lambdas/registration-lambda
      Runtime: nodejs10.x
      Timeout: 120
      Environment:
        Variables:
          AccountId: !Ref AWS::AccountId
          EventQueue: !Ref CertificateEventQueue
          ThingName: !Ref ThingName
          ThingTypeName: !Ref ThingTypeName
          GreengrassGroupName: !Ref GreengrassGroupName
          InterceptorLambda: !Ref InterceptorLambda
          LoggingTable: !If [LogToDynamoDb, !Ref ProvisioningTable, !Ref "AWS::NoValue"]
          SqsQueue: !If [LogToSqs, !Ref ProvisioningQueue, !Ref "AWS::NoValue"]
          LogToCloudWatch: !If [LogToCloudWatch, true, !Ref "AWS::NoValue"]
          CloudWatchNamespace: "AWS/IoT"
          DevicePolicyName: !Ref DevicePolicyName
          DeviceReceivePolicy: !Ref DeviceReceivePolicy
          DeviceSubscribePolicy: !Ref DeviceSubscribePolicy
          DevicePublishPolicy: !Ref DevicePublishPolicy
          GreengrassPolicyName: !Ref GreengrassPolicyName
          GreengrassReceivePolicy: !Ref GreengrassReceivePolicy
          GreengrassSubscribePolicy: !Ref GreengrassSubscribePolicy
          GreengrassPublishPolicy: !Ref GreengrassPublishPolicy
          GreengrassServiceRole: !If
            - HasNotUserServiceAccountRole
            - !GetAtt GreengrassServiceAccountRole.Arn
            - !Ref GreengrassUserServiceAccountRole

  # The event source mapping between the certificate event
  # queue and the registration lambda function.
  RegistrationLambdaEventSourceMapping:
    Type: AWS::Lambda::EventSourceMapping
    Properties:
      BatchSize: 1
      Enabled: true
      EventSourceArn: !GetAtt CertificateEventQueue.Arn
      FunctionName: !GetAtt RegistrationLambda.Arn

  # AWS IoT rule intercepting certificates registration
  # events, and forwards them to the registration Lambda
  # function.
  RegistrationTopicRule:
    Type: AWS::IoT::TopicRule
    Properties:
      RuleName: jitr_registration_rule
      TopicRulePayload:
        Description: >-
          An AWS IoT rule that forwards certificate registration events to an
          SQS queue for asynchronous processing by the Just-In-Time Registration Lambda.
        RuleDisabled: false
        Sql: >-
          SELECT * FROM '$aws/events/certificates/registered/+'
        Actions:
          - Sqs:
              QueueUrl: !Ref CertificateEventQueue
              RoleArn: !GetAtt IotQueuingRole.Arn
              UseBase64: false

  # The Greengrass Service Role to create, and which will
  # be associated with the created Greengrass Groups.
  GreengrassServiceAccountRole:
    Condition: HasNotUserServiceAccountRole
    Type: AWS::IAM::Role
    Properties:
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSGreengrassResourceAccessRolePolicy
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - greengrass.amazonaws.com
            Action:
              - sts:AssumeRole

  ######################################################
  ###                                                ###
  ###         Registration Logging Resources         ###
  ###                                                ###
  ###   Declaration of the CloudFormation resources  ###
  ###     allowing the logging of the just in time   ###
  ###            registration of devices.            ###
  ###                                                ###
  ######################################################

  # A DynamoDB Table that keeps a record of the
  # provisioning events having occured on the
  # platform.
  ProvisioningTable:
    Type: AWS::DynamoDB::Table
    Condition: LogToDynamoDb
    Properties:
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: certificateId
          AttributeType: S
        - AttributeName: timestamp
          AttributeType: N
      KeySchema:
        - AttributeName: certificateId
          KeyType: HASH
        - AttributeName: timestamp
          KeyType: RANGE

  # An SQS queue to which the provisioning
  # events will be sent to for further processing
  # by an external consumer.
  ProvisioningQueue:
    Condition: LogToSqs
    Type: AWS::SQS::Queue

# The outputs to be generated by this template.
Outputs:
  Name:
    Description: >
      Just-In-Time-Registration Stack Name.
    Value: !Ref AWS::StackName
    Export:
      Name: !Sub ${AWS::StackName}-Name
  RegistrationRole:
    Description: >
      The ARN of the registration lambda function role.
    Value: !GetAtt RegistrationRole.Arn
    Export:
      Name: !Sub ${AWS::StackName}-RegistrationRole
  IotQueuingRole:
    Description: >
      The ARN of the role allowing AWS IoT to enqueue provisioning events on SQS.
    Value: !GetAtt IotQueuingRole.Arn
    Export:
      Name: !Sub ${AWS::StackName}-IotQueuingRole
  RegistrationLambda:
    Description: >
      The ARN of the registration lambda function.
    Value: !GetAtt RegistrationLambda.Arn
    Export:
      Name: !Sub ${AWS::StackName}-RegistrationLambda
  GreengrassServiceAccountRoleArn:
    Description: >
      The ARN of the used Greengrass service account role.
    Value: !If
      - HasNotUserServiceAccountRole
      - !GetAtt GreengrassServiceAccountRole.Arn
      - !Ref GreengrassUserServiceAccountRole
    Export:
      Name: !Sub ${AWS::StackName}-GreengrassServiceAccountRoleArn
  CertificateEventQueueUrl:
    Description: >
      The URL of the certificate event processing SQS queue.
    Value: !Ref CertificateEventQueue
    Export:
      Name: !Sub ${AWS::StackName}-CertificateEventQueueUrl
  CertificateEventDLQUrl:
    Description: >
      The URL of the certificate event processing DLQ.
    Value: !Ref CertificateEventDLQ
    Export:
      Name: !Sub ${AWS::StackName}-CertificateEventDLQUrl
  DynamoDbTableArn:
    Condition: LogToDynamoDb
    Description: >
      The ARN of the logging DynamoDB table.
    Value: !GetAtt ProvisioningTable.Arn
    Export:
      Name: !Sub ${AWS::StackName}-DynamoDbTableArn
  ProvisioningQueueUrl:
    Condition: LogToSqs
    Description: >
      The URL of the SQS logging queue.
    Value: !Ref ProvisioningQueue
    Export:
      Name: !Sub ${AWS::StackName}-ProvisioningQueueUrl
